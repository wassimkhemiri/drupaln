<?php

/**
 * @file
 * Contains functions for Easy-to-Use Drag and Drop Page Builder.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\bootstrap\Bootstrap;
use Drupal\dxpr_builder\Service\DxprBuilderLicenseServiceInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\Mime\Header\UnstructuredHeader;

/**
 * Implements hook_theme().
 */
function dxpr_builder_theme() {
  return [
    'dxpr-license-info' => [
      'template' => 'dxpr-license-info',
      'variables' => [
        'users_count' => NULL,
        'seats_count' => NULL,
        'seats_limit' => NULL,
        'more_info_link' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 *
 * Override the Node class provided by core with a custom
 * impelementation for DXPR Buidler, that allows for overriding
 * of specific entity functionality.
 */
function dxpr_builder_entity_type_alter(array &$entity_types) {
  if (!empty($entity_types['node'])) {
    $node = &$entity_types['node'];
    $node->setClass('Drupal\dxpr_builder\Entity\Node');
  }

  if (!empty($entity_types['block_content'])) {
    $block_content = &$entity_types['block_content'];
    $block_content->setClass('Drupal\dxpr_builder\Entity\BlockContent');
  }
}

/**
 * Implements hook_update_status_alter().
 *
 * Provides link to dxpr.com on Available Updates admin page.
 */
function dxpr_builder_update_status_alter(&$projects) {
  if (isset($projects['dxpr_builder']) && isset($projects['dxpr_builder']['title'])) {
    $projects['dxpr_builder']['title'] .= ' ' . t('on dxpr.com. Click for more info.');
  }
}

/**
 * Implements hook_page_bottom().
 */
function dxpr_builder_page_bottom(array &$page_bottom) {
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $state = \Drupal::state();
    $parts = [
      'sfy39587stp30',
      $state->get('dxpr_builder.users_tier_users_count', '0 0'),
      $state->get('dxpr_builder.saves_count', 0),
    ];

    $page_bottom['dxpr_builder'] = [
      '#prefix' => '<div class="hidden">',
      '#suffix' => '</div>',
      '#markup' => implode(' ', $parts),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dxpr_builder_preprocess_page(array &$variables) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage()
    ->getName();

  $default_lang_code = \Drupal::languageManager()
    ->getDefaultLanguage()
    ->getId();

  $variables['#attached']['drupalSettings']['currentLanguage'] = $current_language;
  $variables['#attached']['drupalSettings']['defaultLangCode'] = $default_lang_code;
}

/**
 * Implements hook_js_alter().
 *
 * When a request is from DXPR Builder we know we already have
 * certain assets loaded. Preventing reload of jQuery also helps
 * prevent race conditions leading to undefined function bootstrapSwitch etc.
 */
function dxpr_builder_js_alter(&$javascript) {
  $route = \Drupal::routeMatch()->getRouteName();
  \Drupal::logger('dxpr_builder')->info($route);
  if ($route == 'dxpr_builder.ajax_callback') {
    unset($javascript['core/assets/vendor/jquery/jquery.min.js']);
    unset($javascript['core/assets/vendor/underscore/underscore-min.js']);
    unset($javascript['core/assets/vendor/jquery.ui/ui/jquery-1-7-min.js']);
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * Sets formatting options, also prevents CKeditor from deleting
 * <link> tags that we may have in drag and drop elements.
 *
 * @ingroup integrations
 */
function dxpr_builder_editor_js_settings_alter(array &$settings) {
  foreach (array_keys($settings['editor']['formats']) as $format) {
    $settings['editor']['formats'][$format]['editorSettings']['customConfig'] = base_path() . \Drupal::service('extension.list.module')->getPath('dxpr_builder') . '/js/ckeditor.config.js';
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Clears the cache when a custom block is deleted, so that deleted blocks
 * do not show up in the front end builder.
 */
function dxpr_builder_block_content_delete(EntityInterface $blockContent) {
  drupal_flush_all_caches();
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Clears the cache when a custom block is created, so that newly
 * added blocks show up in the front end builder.
 */
function dxpr_builder_block_content_insert(EntityInterface $blockContent) {
  drupal_flush_all_caches();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a submit handler that is called when a new view is saved, in order to
 * clear the cache so that the new view is shown on the front end builder.
 *
 * @see dxpr_builder_view_add_form_submit
 */
function dxpr_builder_form_view_add_form_alter(array &$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'dxpr_builder_view_add_form_submit';
}

/**
 * Submit handler called when a new view is added.
 *
 * Clears the cache so that the new view shows up on the front end builder.
 *
 * @see dxpr_builder_form_view_add_form_alter
 */
function dxpr_builder_view_add_form_submit(array &$form, FormStateInterface $form_state) {
  drupal_flush_all_caches();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a submit handler that is called when a view is deleted, in order
 * to clear the cache so that the deleted view is not shown on the
 * front end builder.
 *
 * @see dxpr_builder_view_delete_form_submit
 */
function dxpr_builder_form_view_delete_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'dxpr_builder_view_delete_form_submit';
}

/**
 * Submit handler called when a view is deleted.
 *
 * Clears the cache so that the deleted view does not
 * show up in the front end builder.
 *
 * @see dxpr_builder_form_view_delete_form_alter
 */
function dxpr_builder_view_delete_form_submit(&$form, FormStateInterface $form_state) {
  drupal_flush_all_caches();
}

/**
 * Implements hook_module_preinstall().
 *
 * Clears the caches when a module is installed to ensure that
 * any newly installed elements show up in the front end builder.
 */
function dxpr_builder_module_preinstall($module) {
  // drupal_flush_all_caches();
}

/**
 * Implements hook_module_preuninstall().
 *
 * Clears the caches when a module is uninstalled to ensure that
 * any removed elements do not show up in the front end builder.
 */
function dxpr_builder_module_preuninstall($module) {
  drupal_flush_all_caches();
}

/**
 * Implements hook_library_info_alter().
 *
 * We side-load our own selection.js script to close the Media Modal and trigger
 * the "entities-selected" event on the correct image parameter input field.
 *
 * Remove modal libraries from bootstrap basetheme
 *
 * @see https://www.drupal.org/project/bootstrap/issues/3014248
 */
function dxpr_builder_library_info_alter(&$libraries, $extension) {
  if ($extension == 'entity_browser') {
    $libraries['iframe_selection']['dependencies'][] = 'dxpr_builder/entity_browser_selection';
    $libraries['modal_selection']['dependencies'][] = 'dxpr_builder/entity_browser_selection';
  }

  // Fix bootstrap dialog break when jQuery UI Bridge enabled.
  // Issue: https://www.drupal.org/project/bootstrap/issues/3219852
  if (class_exists('\Drupal\bootstrap\Bootstrap')) {
    $theme = Bootstrap::getTheme();

    // Apply modal fixes to bootstrap based themes with
    // modal enabled using jquery_ui_bridge.
    if ($theme->isBootstrap() && $theme->getSetting('modal_enabled') && $theme->getSetting('modal_jquery_ui_bridge')) {
      if ($extension == 'core' && !empty($libraries['drupal.dialog'])) {
        // See the link above for the origin of this code.
        if (!empty($libraries['drupal.dialog']['js'])) {
          foreach ($libraries['drupal.dialog']['js'] as $key => $asset) {
            if (preg_match('`^assets/vendor/jquery\.ui`', $key)) {
              unset($libraries['drupal.dialog']['js'][$key]);
            }
          }
        }
        if (isset($libraries['drupal.dialog']['css'])) {
          unset($libraries['drupal.dialog']['css']);
        }
      }
    }
  }

  // When core/underscore library gets deleted we will load
  // underscore library from our vendor, otherwise core/underscore
  // is loaded from Drupal core.
  if ($extension === 'dxpr_builder') {
    $core_underscore = \Drupal::service('library.discovery')
      ->getLibraryByName('core', 'underscore');

    if ($core_underscore) {
      $libs = [
        "editor.core",
        "editor.frontend",
        "editor.frontend_dev",
        "bootstrap_3",
        "bootstrap_4",
        "bootstrap_5",
      ];
      foreach ($libs as $lib) {
        unset($libraries[$lib]['js']['dxpr_builder/vendor/managed/underscore/underscore-min.js']);
        $libraries[$lib]['dependencies'][] = 'core/underscore';
      }
    }
  }
}

/**
 * Implements hook_library_info_build().
 *
 * Add the DXPR Builder editor library. Its definition depends on the source
 * setting and version used.
 */
function dxpr_builder_library_info_build() {
  $libraries = [];

  // Get the version of this module.
  $info = \Drupal::service('extension.list.module')->getExtensionInfo('dxpr_builder');
  $version = $info['version'] ?? 'latest';

  // Get the assets source and license settings.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('dxpr_builder.settings');
  $assets_source = $config->get('editor_assets_source');

  $url = $config->get('cloud_url') ?? 'https://cdn.dxpr.com/VERSION/';
  $url = str_replace('VERSION', $version, $url);
  $source = $assets_source == 0 ? $url : 'dxpr_builder/';
  $suffix = $assets_source == 2 ? '.js' : '.min.js';

  // Add license when loading assets from cloud.
  $query = '';
  if ($assets_source == 0 && ($jwt = $config->get('json_web_token'))) {
    $query = "?jwt=$jwt";
  }

  $library_type = $assets_source == 0 ? [
    'type' => 'external',
    'minified' => TRUE,
  ] : [
    'minified' => $assets_source != 2,
  ];

  $license = [
    'name' => 'proprietary',
    'url' => 'https://dxpr.com/legal/terms',
    'gpl-compatible' => FALSE,
  ];

  $libraries['editor.builder'] = [
    'version' => $version,
    'remote' => 'https://dxpr.com',
    'js' => [
      "${source}dxpr_templates$suffix$query" => $library_type + ['weight' => -8],
      "${source}dxpr_global$suffix$query" => $library_type + ['weight' => -7],
      "${source}dxpr_events$suffix$query" => $library_type + ['weight' => -6],
      "${source}dxpr_param_types$suffix$query" => $library_type + ['weight' => -5],
      "${source}dxpr_elements$suffix$query" => $library_type + ['weight' => -4],
      "${source}dxpr_builder$suffix$query" => $library_type + ['weight' => -3],
    ],
    'dependencies' => [
      'dxpr_builder/editor.core',
      'dxpr_builder/editor.validation',
    ],
    'license' => $license,
  ];

  $libraries['editor.core.styles'] = [
    'version' => $version,
    'remote' => 'https://dxpr.com',
    'license' => $license,
    'css' => [
      'theme' => [
        "${source}css/dxpr_builder_backend.css$query" => [],
      ],
    ],
  ];

  $libraries['editor.global'] = [
    'version' => $version,
    'remote' => 'https://dxpr.com',
    'license' => $license,
    'css' => [
      'theme' => [
        "${source}css/dxpr_builder_backend_global.css$query" => [],
      ],
    ],
  ];

  // The "production" and "development" libraries are obsolete, but omitting
  // them will give errors on the module upgrade.
  $libraries['development'] = $libraries['editor.builder'];
  $libraries['production'] = $libraries['editor.builder'];

  return $libraries;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dxpr_builder_webform_insert(EntityInterface $entity) {
  \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
  \Drupal::cache()->delete('dxpr_builder:cms_elements_blocks');
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['node_view']);
}

/**
 * Implements hook_ENTITY_TYPE__delete().
 */
function dxpr_builder_webform_delete(EntityInterface $entity) {
  \Drupal::service('plugin.manager.block')->clearCachedDefinitions();
  \Drupal::cache()->delete('dxpr_builder:cms_elements_blocks');
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['node_view']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dxpr_builder_form_system_modules_paths_confirm_form_alter(&$form, FormStateInterface $form_state) {
  if (in_array('DXPR Builder', $form['modules']['#items'])) {
    \Drupal::messenger()->addWarning('After running the process, please check and test all updated content before taking the updated content to your production website.');
  }
}

/**
 * Implements hook_file_download().
 */
function dxpr_builder_file_download($uri) {
  // If the file_entity module is enabled then it controls access to files.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('file_entity')) {
    return NULL;
  }
  // Handle it only when the uri is matched with private dxpr folder.
  $is_dxpr_images = (strpos($uri, 'private://dxpr_builder_images/') === 0);
  $is_dxpr_videos = (strpos($uri, 'private://dxpr_builder_videos/') === 0);
  if (!$is_dxpr_images && !$is_dxpr_videos) {
    return NULL;
  }
  // Handle only real files.
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  if (empty($files)) {
    return NULL;
  }

  /** @var \Drupal\file\FileInterface $file */
  $file = reset($files);
  // Return file content headers.
  $headers = file_get_content_headers($file);

  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $filename = $file_system->basename($uri);
  $headers['Content-Disposition'] = 'inline; filename="' . (new UnstructuredHeader('filename', $filename))->getBodyAsString() . '"';

  return $headers;
}

/**
 * Implements hook_page_top().
 */
function dxpr_builder_page_top(array &$page_top) {
  if (!\Drupal::currentUser()->hasPermission('edit with dxpr builder')) {
    return;
  }

  /** @var \Drupal\dxpr_builder\Service\DxprBuilderLicenseServiceInterface $license_service */
  $license_service = \Drupal::service('dxpr_builder.license_service');

  if ($license_service->isBlacklisted()) {
    \Drupal::messenger()->addError(t('Access to DXPR Builder is blocked because of a payment or licensing problem, Please contact us via our <a href="@url" target="_blank">contact page</a> to resolve the issue.', [
      '@url' => 'https://dxpr.com/contact',
    ]));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dxpr_builder_preprocess_menu_local_action(&$variables) {
  if (!empty($variables['link']['#options']['attributes']['disabled'])) {
    /** @var \Drupal\Core\Url $url */
    $url = $variables['link']['#url'];
    if ($url->isRouted() && $url->getRouteName() === 'entity.dxpr_builder_profile.collection') {
      $variables['link']['#suffix'] = '<div class="messages messages--warning">' . t('Provisioning multiple editor profiles to respective user roles is only supported on the DXPR Enterprise subscription tier.') . '</div>';
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function dxpr_builder_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'dxpr_builder/editor.global';
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function dxpr_builder_menu_links_discovered_alter(&$links) {
  // Alter DXPR Studio menu links.
  if (\Drupal::moduleHandler()->moduleExists('dxpr_theme_helper')) {
    // Skip routes alter in case DXPR Theme helper is not updated.
    if (array_key_exists('dxpr_theme_helper.studio_theme', $links)) {
      unset($links['dxpr_theme_helper.studio']);
      $links['dxpr_theme_helper.studio_theme']['parent'] = 'dxpr_builder.studio';
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function dxpr_builder_user_insert(UserInterface $account) {
  if ($account->hasPermission('edit with dxpr builder')) {
    \Drupal::service('dxpr_builder.license_service')
      ->syncUsersWithCentralStorage(
        [$account->id()],
        DxprBuilderLicenseServiceInterface::DXPR_USER_ADD_OPERATION
      );
  }
}

/**
 * Implements hook_user_cancel().
 */
function dxpr_builder_user_cancel($edit, UserInterface $account, $method) {
  if ($account->hasPermission('edit with dxpr builder')) {
    \Drupal::service('dxpr_builder.license_service')
      ->syncUsersWithCentralStorage(
        [$account->id()],
        DxprBuilderLicenseServiceInterface::DXPR_USER_REMOVE_OPERATION
      );
  }
}

/**
 * Implements hook_user_predelete().
 */
function dxpr_builder_user_predelete(UserInterface $account) {
  if ($account->hasPermission('edit with dxpr builder')) {
    \Drupal::service('dxpr_builder.license_service')
      ->syncUsersWithCentralStorage(
      [$account->id()],
      DxprBuilderLicenseServiceInterface::DXPR_USER_REMOVE_OPERATION
    );
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dxpr_builder_user_update(UserInterface $account) {
  if ($account->id() == 1 || $account->hasPermission('edit with dxpr builder')) {
    \Drupal::service('dxpr_builder.license_service')
      ->syncUsersWithCentralStorage(
        [$account->id()],
        DxprBuilderLicenseServiceInterface::DXPR_USER_ADD_OPERATION
      );
  }
  elseif ($account->hasPermission('edit with dxpr builder')) {
    \Drupal::service('dxpr_builder.license_service')
      ->syncUsersWithCentralStorage(
        [$account->id()],
        DxprBuilderLicenseServiceInterface::DXPR_USER_REMOVE_OPERATION
      );
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function dxpr_builder_theme_suggestions_page(array $variables) {
  $suggestions = [];

  // Add new suggestions for the people page.
  if (\Drupal::routeMatch()->getRouteName() === 'entity.user.collection') {
    $suggestions[] = $variables['theme_hook_original'] . '__people_list';
  }

  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dxpr_builder_preprocess_page__people_list(&$variables) {
  $variables['user_license'] = \Drupal::service('dxpr_builder.license_service')
    ->getUserLicenseInfo();
}

/**
 * Implements hook_views_data_alter().
 */
function dxpr_builder_views_data_alter(array &$data) {
  $data['users_field_data']['dxpr_builder_user'] = [
    'title' => t('DXPR Builder User'),
    'group' => t('DXPR Builder'),
    'field' => [
      'title' => t('DXPR Builder User'),
      'help' => t('Indicates if the user is a billable user for DXPR builder.'),
      'id' => 'dxpr_builder_user_field',
    ],
  ];
}

/**
 * Implements hook_help().
 */
function dxpr_builder_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.dxpr_builder_profile.collection':
      return '<p>' . t('User profiles let you customize the DXPR Builder interface for different user roles. If a user account matches to multiple user profiles, the first profile will be chosen using the order of profiles set below. <a href=":profiles_doc">User profiles documentation</a>.', [':profiles_doc' => 'https://app.dxpr.com/documentation/external/dxpr-builder-user-profiles']) . '</p>';

    case 'entity.dxpr_builder_profile.add_form':
    case 'entity.dxpr_builder_profile.edit_form':
      return '<p>' . t('Anything you configure here will only apply to users that have one or more of the user roles you select in the Roles setting below.') . '</p>';

    case 'entity.dxpr_builder_user_template.collection':
      return '<p>' . t('User templates are DXPR Builder elements or pages saved by DXPR Builder users. <a href=":user_templates_doc">User templates documentation</a>.', [':user_templates_doc' => 'https://app.dxpr.com/documentation/external/user-templates']) . '</p>';

    case 'entity.dxpr_builder_page_template.collection':
      return '<p>' . t('Page templates are preset DXPR Builder pages that come with the product. Page templates are only available on empty DXPR Builder containers. You can extend or replace templates with your own by managing page template configuration objects on this page. <a href=":page_templates_doc">User templates documentation</a>.', [':page_templates_doc' => 'https://dxpr.com/documentation/external/page-templates']) . '</p>';

    case 'dxpr_builder.user_licenses':
      return '<p>' . t('User licenses are needed for any Drupal account that has permission to use DXPR Builder. You need a paid DXPR.com subscription to buy user licenses. When you are logged in at DXPR.com you can add Users to your subscription with the <a href=":addons_form">subscription add-ons form</a>.', [':addons_form' => 'https://app.dxpr.com/user/me/subscription/add-ons']) . '</p>';
  }
}
