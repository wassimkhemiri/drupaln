From dfc938df92a98eda48e354346bc0ce0450741f32 Mon Sep 17 00:00:00 2001
From: nkoporec <me@nkoporec.com>
Date: Mon, 26 Sep 2022 08:24:38 +0200
Subject: [PATCH 1/1] Drupal 10 Compatibility

---
 .../Functional/XmlSitemapFunctionalTest.php   |  4 ++--
 .../Functional/XmlSitemapMultilingualTest.php |  4 ++--
 .../XmlSitemapTaxonomyFunctionalTest.php      | 18 ++++++++++++++-
 xmlsitemap.module                             | 22 ++++++++++++++-----
 4 files changed, 37 insertions(+), 11 deletions(-)

diff --git a/tests/src/Functional/XmlSitemapFunctionalTest.php b/tests/src/Functional/XmlSitemapFunctionalTest.php
index ea54f0e..85789ba 100644
--- a/tests/src/Functional/XmlSitemapFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapFunctionalTest.php
@@ -33,8 +33,8 @@ class XmlSitemapFunctionalTest extends XmlSitemapTestBase {
     $this->regenerateSitemap();
     $this->drupalGetSitemap();
     $this->assertSession()->statusCodeEquals(200);
-    $etag = $this->drupalGetHeader('etag');
-    $last_modified = $this->drupalGetHeader('last-modified');
+    $etag = $this->getSession()->getResponseHeader('etag');
+    $last_modified = $this->getSession()->getResponseHeader('last-modified');
     $this->assertNotEmpty($etag, t('Etag header found.'));
     $this->assertNotEmpty($last_modified, t('Last-modified header found.'));
 
diff --git a/tests/src/Functional/XmlSitemapMultilingualTest.php b/tests/src/Functional/XmlSitemapMultilingualTest.php
index a081d5a..f779582 100644
--- a/tests/src/Functional/XmlSitemapMultilingualTest.php
+++ b/tests/src/Functional/XmlSitemapMultilingualTest.php
@@ -41,10 +41,10 @@ class XmlSitemapMultilingualTest extends XmlSitemapMultilingualTestBase {
     // languages. The link ends with a slash.
     $frontpage_link = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
     $this->drupalGet('sitemap.xml');
-    $this->assertSession()->responseContains($frontpage_link, "English frontpage link found in the sitemap.");
+    $this->assertSession()->responseContains($frontpage_link);
 
     $this->drupalGet('fr/sitemap.xml');
-    $this->assertSession()->responseContains($frontpage_link . 'fr', "French frontpage link found in the sitemap.");
+    $this->assertSession()->responseContains($frontpage_link . 'fr');
   }
 
   /**
diff --git a/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php b/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
index edd7f9b..0fc551d 100644
--- a/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
+++ b/tests/src/Functional/XmlSitemapTaxonomyFunctionalTest.php
@@ -17,12 +17,21 @@ class XmlSitemapTaxonomyFunctionalTest extends XmlSitemapTestBase {
    */
   protected static $modules = ['taxonomy'];
 
+  /**
+   * Entity type manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
   /**
    * {@inheritdoc}
    */
   protected function setUp(): void {
     parent::setUp();
 
+    $this->entityTypeManager = $this->container->get('entity_type.manager');
+
     // Add a vocabulary.
     $vocabulary = Vocabulary::create([
       'name' => 'Tags',
@@ -64,7 +73,14 @@ class XmlSitemapTaxonomyFunctionalTest extends XmlSitemapTestBase {
     ];
     $this->submitForm($edit, t('Save'));
 
-    $term = taxonomy_term_load_multiple_by_name($term_name, 'tags')[1];
+    $term = $this
+      ->entityTypeManager
+      ->getStorage("taxonomy_term")
+      ->loadByProperties([
+        "name" => $term_name,
+        "vid" => 'tags',
+      ]);
+    $term = $term[1];
     $link = $this->linkStorage->load('taxonomy_term', $term->id());
     $this->assertEquals(1, (int) $link['status']);
     $this->assertEquals(1, (int) $link['priority']);
diff --git a/xmlsitemap.module b/xmlsitemap.module
index e012849..d1b0efa 100644
--- a/xmlsitemap.module
+++ b/xmlsitemap.module
@@ -852,10 +852,9 @@ function xmlsitemap_get_link_type_indexed_status($entity_type_id, $bundle = '')
     if ($bundle && $entity_type->hasKey('bundle')) {
       $query->condition($entity_type->getKey('bundle'), $bundle);
     }
-    // We are only using this for totals, so we can skip the access check.
-    $query->accessCheck(FALSE);
     $query->addTag('xmlsitemap_link_indexed_status');
-    $status['total'] = $query->count()->execute();
+    // We are only using this for totals, so we can skip the access check.
+    $status['total'] = $query->count()->accessCheck(FALSE)->execute();
     return $status;
   }
   catch (\Exception $e) {
@@ -2346,11 +2345,22 @@ function xmlsitemap_check_status() {
       $modules = $cache->data;
     }
     else {
+      $hook = 'requirements';
       $modules = [];
       \Drupal::moduleHandler()->loadAllIncludes('install');
-      foreach (\Drupal::moduleHandler()->getImplementations('requirements') as $module) {
-        if (strpos($module, 'xmlsitemap') !== FALSE) {
-          $modules[] = $module;
+
+      if (method_exists(\Drupal::moduleHandler(), 'invokeAllWith')) {
+        \Drupal::moduleHandler()->invokeAllWith($hook, function (callable $hook, string $module) use (&$modules) {
+          if (strpos($module, 'xmlsitemap') !== FALSE) {
+            $modules[] = $module;
+          }
+        });
+      } else {
+        //@phpstan-ignore-next-line
+        foreach (\Drupal::moduleHandler()->getImplementations('requirements') as $module) {
+          if (strpos($module, 'xmlsitemap') !== FALSE) {
+            $modules[] = $module;
+          }
         }
       }
       \Drupal::cache()->set('xmlsitemap:registry:requirements', $modules, Cache::PERMANENT, ['xmlsitemap']);
-- 
2.37.3

